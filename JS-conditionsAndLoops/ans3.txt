Loops in JavaScript are control flow structures that allow you to repeatedly execute a block of code until a certain condition is met. They are useful for automating repetitive tasks and iterating over data structures. JavaScript provides several types of loops, including the for loop, while loop, and do-while loop.

1. for loop:
The for loop is used when you know the number of iterations in advance. It consists of three parts: initialization, condition, and iteration expression.

Syntax:

javascript

for (initialization; condition; iteration) {
  // Code to be executed in each iteration
}
Example:

javascript

for (let i = 0; i < 5; i++) {
  console.log(i);
}
2. while loop:
The while loop is used when you don't know the number of iterations in advance, and the loop continues until the specified condition becomes false.

Syntax:

javascript
Copy code
while (condition) {
  // Code to be executed as long as the condition is true
}
Example:

javascript

let i = 0;

while (i < 5) {
  console.log(i);
  i++;
}
3. do-while loop:
The do-while loop is similar to the while loop, but it guarantees that the code inside the loop will be executed at least once before checking the condition.

Syntax:

javascript
Copy code
do {
  // Code to be executed
} while (condition);
Example:

javascript

let i = 0;

do {
  console.log(i);
  i++;
} while (i < 5);
Loop Control Statements:
break statement:

Used to exit a loop prematurely.
javascript

for (let i = 0; i < 10; i++) {
  if (i === 5) {
    break;
  }
  console.log(i);
}
continue statement:

Skips the rest of the code inside a loop for the current iteration and moves to the next iteration.

for (let i = 0; i < 5; i++) {
  if (i === 2) {
    continue;
  }
  console.log(i);
}
Loops are essential for iterating over arrays, processing data, and performing repetitive tasks. They provide a way to make your code more efficient and concise by avoiding manual repetition of similar code blocks. The choice of loop depends on the specific requirements of your task and the structure of your data.
